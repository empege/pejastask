[{"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\index.js":"1","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\App.js":"2","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Navbar\\Navbar.js":"3","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\context.js":"4","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Navbar\\WeatherPopup.js":"5","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Navbar\\WeatherIcon.js":"6","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\data.js":"7","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Users\\UserForm.js":"8","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Users\\Users.js":"9","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Users\\UsersTable.js":"10","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Companies\\Companies.js":"11","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Companies\\CompanyForm.js":"12","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Newsletter\\Newsletter.js":"13","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Newsletter\\PostDetails.js":"14","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Newsletter\\Comment.js":"15"},{"size":219,"mtime":1610911534718,"results":"16","hashOfConfig":"17"},{"size":1370,"mtime":1611257620970,"results":"18","hashOfConfig":"17"},{"size":1032,"mtime":1611008551504,"results":"19","hashOfConfig":"17"},{"size":5388,"mtime":1611239933299,"results":"20","hashOfConfig":"17"},{"size":1440,"mtime":1611189011783,"results":"21","hashOfConfig":"17"},{"size":1000,"mtime":1611317352952,"results":"22","hashOfConfig":"17"},{"size":1342,"mtime":1611170205943,"results":"23","hashOfConfig":"17"},{"size":5065,"mtime":1611234527822,"results":"24","hashOfConfig":"17"},{"size":633,"mtime":1611234415272,"results":"25","hashOfConfig":"17"},{"size":2653,"mtime":1611175293064,"results":"26","hashOfConfig":"17"},{"size":1557,"mtime":1611173727226,"results":"27","hashOfConfig":"17"},{"size":2641,"mtime":1611257413376,"results":"28","hashOfConfig":"17"},{"size":1035,"mtime":1611257834347,"results":"29","hashOfConfig":"17"},{"size":2545,"mtime":1611317625634,"results":"30","hashOfConfig":"17"},{"size":655,"mtime":1611272020137,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1uijacp",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\index.js",[],["68","69"],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\App.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\context.js",["70","71","72","73","74"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { data } from './data'\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [companies, setCompanies] = useState(null);\r\n  const [users, setUsers] = useState([])\r\n\r\n  const getUsers = () => {\r\n    const newUsers = [];\r\n    if (companies) {\r\n      companies.forEach(company => {\r\n        if (company.users) {\r\n          newUsers.push(...company.users);\r\n        }\r\n      })\r\n    }\r\n    setUsers(newUsers);\r\n  }\r\n\r\n  //Random Id function for creating guids\r\n  function randomId() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n\r\n  //set companies - get users - put in localStorage\r\n  const setGetLocal = (newCompanies) => {\r\n    setCompanies(newCompanies);\r\n    getUsers();\r\n    localStorage.setItem('companies', JSON.stringify(newCompanies))\r\n  }\r\n\r\n  /* USERS */\r\n  //delete user\r\n  const deleteUser = (id) => {\r\n    const newCompanies = companies.map(company => {\r\n      const passedUsers = company.users.filter(user => {\r\n        return user.id !== id;\r\n      })\r\n      return { ...company, users: passedUsers };\r\n    })\r\n    setGetLocal(newCompanies);\r\n  }\r\n  //add user\r\n  const addUser = (companyId, newUserInfo) => {\r\n    const newCompanies = companies.map(company => {\r\n      if (company.id === companyId) {\r\n        const newUsers = [...company.users, newUserInfo];\r\n        return { ...company, users: newUsers }\r\n      }\r\n      return company;\r\n    })\r\n    setGetLocal(newCompanies);\r\n  }\r\n  //edit user\r\n  const editUser = (id, companyId, editedUserInfo) => {\r\n    const deletedUserCompanies = companies.map(company => {\r\n      const passedUsers = company.users.filter(user => {\r\n        return user.id !== id;\r\n      })\r\n      return { ...company, users: passedUsers };\r\n    })\r\n    const newCompanies = deletedUserCompanies.map(company => {\r\n      if (company.id === companyId) {\r\n        const newUsers = [...company.users, editedUserInfo];\r\n        return { ...company, users: newUsers }\r\n      }\r\n      return company;\r\n    })\r\n    setGetLocal(newCompanies);\r\n  }\r\n\r\n  /* COMPANIES */\r\n  //delete company\r\n  const deleteCompany = (id) => {\r\n    const newCompanies = companies.filter(company => company.id !== id)\r\n    setGetLocal(newCompanies);\r\n  }\r\n  //add company\r\n  const addCompany = (newCompanyInfo) => {\r\n    const newCompanies = [...companies, newCompanyInfo];\r\n    setGetLocal(newCompanies);\r\n  }\r\n  //edit company\r\n  const editCompany = (id, editedCompanyInfo) => {\r\n    const newCompanies = companies.map(company => {\r\n      console.log(editedCompanyInfo)\r\n      if (company.id === id) {\r\n        return editedCompanyInfo\r\n      }\r\n      return company\r\n    })\r\n    setGetLocal(newCompanies);\r\n  }\r\n\r\n  //Location and Fetch Weather Data\r\n  const [weatherLoading, setWeatherLoading] = useState(false);\r\n  const [weatherData, setWeatherData] = useState(false);\r\n  const [weatherError, setWeatherError] = useState(false);\r\n\r\n  function getLocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(showPosition);\r\n    } else {\r\n      setWeatherLoading(false);\r\n    }\r\n  }\r\n  async function showPosition(position) {\r\n    setWeatherLoading(true);\r\n    //CORS proxy! :D\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    //first get location and with it nearest cities\r\n    const [lat, long] = [position.coords.latitude, position.coords.longitude];\r\n    const locationResp = await fetch(`${proxyurl}https://www.metaweather.com/api/location/search/?lattlong=${lat},${long}`)\r\n    if (locationResp.ok === false) {\r\n      setWeatherError(true);\r\n      setWeatherLoading(false);\r\n    } else {\r\n      //get weather info from the nearest city\r\n      const weatherLocation = await locationResp.json();\r\n      const closestCity = weatherLocation[0].woeid;\r\n      const weatherDataResp = await fetch(`${proxyurl}https://www.metaweather.com/api/location/${closestCity}`)\r\n      const weather = await weatherDataResp.json();\r\n      if (!weatherDataResp.ok) {\r\n        setWeatherLoading(false);\r\n        setWeatherError(true);\r\n      }\r\n      setWeatherLoading(false);\r\n      setWeatherData(weather);\r\n      // console.log(weather)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getLocation();\r\n    // Get Companies Data from Local Storage or if none there, from data.js\r\n    if (localStorage.getItem('companies') !== null) {\r\n      const companiesData = JSON.parse(localStorage.getItem('companies'));\r\n      setCompanies(companiesData);\r\n    } else {\r\n      localStorage.setItem('companies', JSON.stringify(data))\r\n      setCompanies(data);\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, [companies])\r\n\r\n  return (\r\n    <AppContext.Provider value={{\r\n      weatherLoading,\r\n      setWeatherLoading,\r\n      getLocation,\r\n      weatherData,\r\n      weatherError,\r\n      randomId,\r\n      // isLoadingData,\r\n      companies,\r\n      setCompanies,\r\n      users,\r\n      deleteUser,\r\n      addUser,\r\n      editUser,\r\n      deleteCompany,\r\n      addCompany,\r\n      editCompany,\r\n    }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext)\r\n}\r\n\r\nexport { AppContext, AppProvider }","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Navbar\\WeatherPopup.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Navbar\\WeatherIcon.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\data.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Users\\UserForm.js",["75"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { useGlobalContext } from '../../context';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst UserForm = () => {\r\n  const { companies, randomId, addUser, editUser } = useGlobalContext();\r\n  let { id, companyIdParam } = useParams();\r\n  const history = useHistory();\r\n\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [companyId, setCompanyId] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [position, setPosition] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (companyIdParam) {\r\n      setCompanyId(companyIdParam)\r\n    }\r\n  }, [])\r\n\r\n  const handlePhone = (e) => {\r\n    const input = e.target.value;\r\n    const regex = /^[0-9]+$/g;\r\n    const found = input.match(regex);\r\n    if (!isNaN(input) && found)\r\n      setPhone(input);\r\n  }\r\n  const handleCompany = (e) => {\r\n    setCompanyId(e.target.value);\r\n  }\r\n\r\n  const handleDob = (date) => {\r\n    setStartDate(date)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setDob(`${startDate.getUTCDate() < 10 ? '0' + startDate.getUTCDate() : startDate.getUTCDate()}/${startDate.getMonth() + 1 < 10 ? '0' + (startDate.getMonth() + 1) : startDate.getMonth() + 1}/${startDate.getFullYear()}`)\r\n  }, [startDate])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const companyName = companies.find(company => company.id === companyId).name;\r\n\r\n    const newUserInfo = {\r\n      id: randomId(),\r\n      firstName,\r\n      lastName,\r\n      companyId,\r\n      companyName,\r\n      dob,\r\n      position,\r\n      phone,\r\n    }\r\n    const editedUserInfo = {\r\n      id,\r\n      firstName,\r\n      lastName,\r\n      companyId,\r\n      companyName,\r\n      dob,\r\n      position,\r\n      phone,\r\n    }\r\n    if (id === 'add-user') {\r\n      addUser(companyId, newUserInfo)\r\n    } else {\r\n      editUser(id, companyId, editedUserInfo);\r\n      //PITAJ PEJICA! DA LI JE useState async i ako jeste, a jeste, sta raditi. Jer ako se stavi ovo ispod sto sam stavio, ovaj add user ne vidi novi state companies-a, nego stari, i onda samo doda novi, bez brisanja starog, a onda kad izbrisem taj jedan, obrisu se oba jer naravno imaju isti id. Koje je resenjeeee Pejicuuuuu xD\r\n      // deleteUser(id, companyId, editedUserInfo);\r\n      // addUser(companyId, editedUserInfo)\r\n    }\r\n    history.push('/')\r\n  }\r\n\r\n  if (companies !== null) {\r\n    return (\r\n      <section className=\"users-company-wrapper\">\r\n        <div className=\"title-wrapper\">\r\n          <h1>{id === 'add-user' ? 'Add New User:' : 'Edit User Info:'}</h1>\r\n          <button className=\"btn\" type=\"submit\" form=\"addOrEditUserForm\">Save</button>\r\n        </div>\r\n        <div className=\"form-wrapper\">\r\n          <form id=\"addOrEditUserForm\" onSubmit={handleSubmit}>\r\n            <label htmlFor=\"\">First Name:</label>\r\n            <input type=\"text\" value={firstName} required onChange={(e) => setFirstName(e.target.value)} />\r\n            <label htmlFor=\"\">Last Name:</label>\r\n            <input type=\"text\" value={lastName} required onChange={(e) => setLastName(e.target.value)} />\r\n            <label htmlFor=\"\">Company:</label>\r\n            <select value={companyId} required onChange={(e) => handleCompany(e)} >\r\n              <option value=\"\">--Please choose a company--</option>\r\n              {\r\n                companies.map(company => {\r\n                  const { id, name } = company;\r\n                  return (\r\n                    <option key={id} value={id}>{name}</option>\r\n                  )\r\n                })\r\n              }\r\n            </select>\r\n            <label htmlFor=\"\">Date of Birth:</label>\r\n            <DatePicker\r\n              selected={startDate}\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              maxDate={new Date()}\r\n              showYearDropdown\r\n              scrollableMonthYearDropdown\r\n              onChange={date => handleDob(date)}\r\n            />\r\n            {/* <input type=\"text\" value={dob} required onChange={(e) => setDob(e.target.value)} /> */}\r\n            <label htmlFor=\"\">Position:</label>\r\n            <select value={position} required onChange={(e) => setPosition(e.target.value)} >\r\n              <option value=\"\">--Please choose a position--</option>\r\n              <option value=\"Manager\">Manager</option>\r\n              <option value=\"QA Engineer\">QA Engineer</option>\r\n              <option value=\"Software Developer\">Software Developer</option>\r\n              <option value=\"Stuff\">Stuff</option>\r\n            </select>\r\n            <label htmlFor=\"\">Phone Number: <br /><span>(Exactly 9 digits required)</span></label>\r\n            <input type=\"text\" maxLength=\"9\" pattern=\"[0-9]{9}\" value={phone} required onChange={(e) => handlePhone(e)} />\r\n          </form>\r\n        </div>\r\n      </section>\r\n\r\n    )\r\n  }\r\n  return 'Loading...'\r\n}\r\n\r\nexport default UserForm\r\n","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Users\\Users.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Users\\UsersTable.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Companies\\Companies.js",["76"],"import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { useGlobalContext } from '../../context';\r\n\r\nconst Companies = () => {\r\n  const { companies, users, deleteUser } = useGlobalContext();\r\n\r\n  if (companies) {\r\n    return (\r\n      <section className=\"users-company-wrapper\">\r\n        <div className=\"title-wrapper\">\r\n          <h1>Companies:</h1>\r\n          <Link className=\"btn\" to={`/companies/add-company`}>Add a Company</Link>\r\n        </div>\r\n        <div className=\"users\">\r\n          <article className=\"user heading\">\r\n            <h3>Name</h3>\r\n            <h3>City</h3>\r\n            <h3>Country</h3>\r\n            <h3>No. of Users</h3>\r\n          </article>\r\n          {\r\n            companies.map(company => {\r\n              const { id, name, users, city, country } = company;\r\n              return (\r\n                <article key={id} className=\"user\">\r\n                  <h3>{name}</h3>\r\n                  <h3>{city}</h3>\r\n                  <h3>{country}</h3>\r\n                  <h3>{users.length}</h3>\r\n                  <div className=\"btn-wrapper\">\r\n                    <Link className=\"btn\" to={`/companies/company/${id}`}>Edit</Link>\r\n                  </div>\r\n                  <div className=\"btn-wrapper\">\r\n                    <button className=\"btn\" onClick={() => { deleteUser(id) }}>Delete</button>\r\n                  </div>\r\n                </article>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n  return 'Loading...'\r\n\r\n\r\n}\r\n\r\nexport default Companies\r\n","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Companies\\CompanyForm.js",["77"],"import React, { useState, useEffect } from 'react'\r\nimport Users from '../Users/Users'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { useGlobalContext } from '../../context';\r\n\r\nconst CompanyForm = () => {\r\n  const { companies, randomId, addCompany, editCompany } = useGlobalContext();\r\n  let { id } = useParams();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState('');\r\n  const [city, setCity] = useState('');\r\n  const [country, setCountry] = useState('');\r\n  // For checking whether users arr is empty to show or not users table (title actually).\r\n  const [checkUsers, setCheckUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (id !== 'add-company' && companies) {\r\n      const selectedCompany = companies.filter(company => company.id === id);\r\n      if (selectedCompany.length > 0) {\r\n        setCheckUsers(selectedCompany[0].users)\r\n      }\r\n    }\r\n  }, [checkUsers, companies])\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let users;\r\n    const selectedCompany = companies.filter(company => company.id === id);\r\n    if (selectedCompany.length > 0) {\r\n      users = selectedCompany[0].users.map(user => {\r\n        return { ...user, companyId: id, companyName: name }\r\n      });\r\n    }\r\n\r\n    const newCompanyInfo = {\r\n      id: randomId(),\r\n      name,\r\n      users: [],\r\n      city,\r\n      country,\r\n    }\r\n    const editedCompanyInfo = {\r\n      id,\r\n      name,\r\n      users,\r\n      city,\r\n      country,\r\n    }\r\n    if (id === 'add-company') {\r\n      addCompany(newCompanyInfo);\r\n    } else {\r\n      editCompany(id, editedCompanyInfo);\r\n    }\r\n    history.push('/companies')\r\n  }\r\n\r\n  return (\r\n    <section className=\"users-company-wrapper\">\r\n      <div className=\"title-wrapper\">\r\n        <h1>{id === 'add-company' ? 'Add New Company:' : 'Edit Company Info:'}</h1>\r\n        <button className=\"btn\" type=\"submit\" form=\"addOrEditCompanyForm\">Save</button>\r\n      </div>\r\n\r\n      <div className=\"form-wrapper\">\r\n        <form id=\"addOrEditCompanyForm\" onSubmit={handleSubmit}>\r\n          <label htmlFor=\"\">Name:</label>\r\n          <input type=\"text\" value={name} required onChange={(e) => setName(e.target.value)} />\r\n          <label htmlFor=\"\">City:</label>\r\n          <input type=\"text\" value={city} required onChange={(e) => setCity(e.target.value)} />\r\n          <label htmlFor=\"\">Country:</label>\r\n          <input type=\"text\" value={country} required onChange={(e) => setCountry(e.target.value)} />\r\n        </form>\r\n      </div>\r\n      <Users companyChecker={id} showUsers={id !== 'add-company'} />\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CompanyForm\r\n","C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Newsletter\\Newsletter.js",[],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Newsletter\\PostDetails.js",["78","79"],"C:\\Users\\Ivan\\Desktop\\pejastask\\src\\components\\Newsletter\\Comment.js",["80"],"import React, { useState } from 'react'\r\n\r\nconst Comment = ({ postId, id, name, email, body }) => {\r\n\r\n  const [readMore, setReadMore] = useState(false);\r\n  const [toggle, setToggle] = useState(false)\r\n\r\n  return (\r\n    <div className=\"post\" onClick={() => setToggle(!toggle)}>\r\n      <span className=\"comment-email\">{toggle === true ? name : email}</span>\r\n      <h4>{name}</h4>\r\n      <p>\r\n        {toggle === false ? `${body.substring(0, 15)}... ` : `${body}`}\r\n        <br />\r\n        <button onClick={() => setReadMore(!toggle)}> {toggle === false ? `Read More...` : ` Show Less.`}</button>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Comment\r\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":25,"column":45,"nodeType":"87","messageId":"88","endLine":25,"endColumn":47},{"ruleId":"89","severity":1,"message":"90","line":25,"column":61,"nodeType":"87","messageId":"91","endLine":25,"endColumn":62},{"ruleId":"89","severity":1,"message":"90","line":25,"column":67,"nodeType":"87","messageId":"91","endLine":25,"endColumn":68},{"ruleId":"92","severity":1,"message":"93","line":147,"column":6,"nodeType":"94","endLine":147,"endColumn":8,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":151,"column":6,"nodeType":"94","endLine":151,"endColumn":17,"suggestions":"97"},{"ruleId":"92","severity":1,"message":"98","line":24,"column":6,"nodeType":"94","endLine":24,"endColumn":8,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":6,"column":22,"nodeType":"102","messageId":"103","endLine":6,"endColumn":27},{"ruleId":"92","severity":1,"message":"104","line":24,"column":6,"nodeType":"94","endLine":24,"endColumn":29,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":2,"column":21,"nodeType":"102","messageId":"103","endLine":2,"endColumn":31},{"ruleId":"92","severity":1,"message":"107","line":55,"column":6,"nodeType":"94","endLine":55,"endColumn":8,"suggestions":"108"},{"ruleId":"100","severity":1,"message":"109","line":5,"column":10,"nodeType":"102","messageId":"103","endLine":5,"endColumn":18},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&' and '|'.","unexpectedMixedOperator","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has a missing dependency: 'companyIdParam'. Either include it or remove the dependency array.",["114"],"no-unused-vars","'users' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["115"],"'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.",["116"],"'readMore' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [getLocation]",{"range":"127","text":"128"},"Update the dependencies array to be: [companies, getUsers]",{"range":"129","text":"130"},"Update the dependencies array to be: [companyIdParam]",{"range":"131","text":"132"},"Update the dependencies array to be: [checkUsers, companies, id]",{"range":"133","text":"134"},"Update the dependencies array to be: [fetchPosts]",{"range":"135","text":"136"},[4781,4783],"[getLocation]",[4831,4842],"[companies, getUsers]",[881,883],"[companyIdParam]",[905,928],"[checkUsers, companies, id]",[1462,1464],"[fetchPosts]"]